generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String
  monthly_income  Float?
  monthly_payment Float?
  monthly_loan    Float?
  debt_free_date  DateTime?
  strategy        StrategyType?
  username        String
  user_type       UserType      @default(DEBTOR)
  appointment     Appointment[]
  bills           Bill[]
  budgets         Budget[]
  loans           Loan[]
  transactions    Transaction[]
}

model Loan {
  id                Int           @id @default(autoincrement())
  name              String
  end_date          DateTime
  loan_amount       Float
  installment_month Int
  payment_remaining Int
  interest_rate     Float
  loan_status       PaymentStatus @default(UNPAID)
  userId            Int
  loan_status       PaymentStatus @default(UNPAID)
  user              User          @relation(fields: [userId], references: [id])
}

model Bill {
  id               Int           @id @default(autoincrement())
  name             String
  amount           Float
  repeating_option RepeatOption
  bill_status      PaymentStatus @default(UNPAID)
  userId           Int
  bill_status      PaymentStatus @default(UNPAID)
  user             User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id          Int                 @id @default(autoincrement())
  date        DateTime
  account     AccountType
  category    TransactionCategory
  description String?
  amount      Float
  type        TransactionType
  userId      Int
  user        User                @relation(fields: [userId], references: [id])
}

model Budget {
  id       Int                 @id @default(autoincrement())
  name     String
  amount   Float
  category TransactionCategory
  account  AccountType
  userId   Int
  user     User                @relation(fields: [userId], references: [id])
}

model Consultant {
  id          Int           @id @default(autoincrement())
  name        String
  position    String
  description String
  appointment Appointment[]
}

model Appointment {
  id           Int        @id @default(autoincrement())
  time         DateTime
  consultantId Int
  userId       Int
  consultant   Consultant @relation(fields: [consultantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionCategory {
  SHOPPING
  ENTERTAINMENT
  FOOD
  SALARY
}

enum AccountType {
  PERSONAL
  EDUCATION
}

enum RepeatOption {
  DAILY
  MONTHLY
  YEARLY
}

enum StrategyType {
  AVALANCHE
  SNOWBALL
}

enum UserType {
  DEBTOR
  CONSULTANT
}

enum PaymentStatus{
  PAID
  UNPAID
}